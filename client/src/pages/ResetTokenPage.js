import React, { useEffect, useState } from 'react';
import axios from 'axios';
import '../styles/ResetTokenPage.css';

const ResetTokenPage = () => {
  const [tokens, setTokens] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [copiedTokenId, setCopiedTokenId] = useState(null);

  // Fetch all tokens
  useEffect(() => {
    const fetchTokens = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/auth/tokens');
        setTokens(res.data);
      } catch (err) {
        setError('Failed to load reset tokens');
      } finally {
        setLoading(false);
      }
    };
    fetchTokens();
  }, []);

  const handleCopy = (tokenId, tokenValue) => {
    navigator.clipboard.writeText(tokenValue);
    setCopiedTokenId(tokenId);
    setTimeout(() => setCopiedTokenId(null), 1500);
  };

  const handleDelete = async (tokenId) => {
    if (!window.confirm('Are you sure you want to delete this token?')) return;

    try {
      await axios.delete(`http://localhost:5000/api/auth/token/${tokenId}`);
      setTokens((prev) => prev.filter((t) => t._id !== tokenId));
    } catch (err) {
      alert('Failed to delete token');
    }
  };

  if (loading) return <div className="reset-token-loading">Loading tokens...</div>;

  return (
    <div className="reset-token-container">
      <h2 className="reset-token-title">üîê Password Reset Tokens</h2>
      <p className="reset-token-subtitle">
        Below is a list of all password reset tokens generated by users.
      </p>

      {error && <p className="reset-token-error">{error}</p>}

      {tokens.length === 0 ? (
        <p className="reset-token-empty">No reset tokens found.</p>
      ) : (
        <table className="reset-token-table">
          <thead>
            <tr>
              <th>Phone</th>
              <th>Token</th>
              <th>Expires At</th>
              <th>Status</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {tokens.map((token) => (
              <tr key={token._id}>
                <td>{token.email}</td>
                <td className="token-string">
                  {token.token}
                  <button
                    className="copy-btn"
                    onClick={() => handleCopy(token._id, token.token)}
                  >
                    {copiedTokenId === token._id ? '‚úÖ Copied' : 'copy'}
                  </button>
                </td>
                <td>{new Date(token.expiresAt).toLocaleString()}</td>
                <td>
                  {new Date(token.expiresAt) > new Date() ? (
                    <span className="token-active">Active</span>
                  ) : (
                    <span className="token-expired">Expired</span>
                  )}
                </td>
                <td>
                  <button
                    className="delete-btn"
                    onClick={() => handleDelete(token._id)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default ResetTokenPage;
